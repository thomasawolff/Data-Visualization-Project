import osimport csvimport reimport sysimport glob as gimport numpy as npimport matplotlib.pyplot as pltfrom matplotlib import pylabfrom matplotlib import stylefrom mpl_toolkits.mplot3d import axes3dos.chdir('Y:\\\\PavementAnalysis\\\\Pavemgmt\\\\DATA_COLLECTION\\\\AUTOMATED_VANS\\\\02_COLLECTION_VEHICLES\\\\01_CALIBRATION\\\\calibrationFiles_2017\\\\North')def listNew():    listRiri = []    listLiri = []    listRrut = []    listLrut = []    avgIRIleft = []    avgIRIright = []    avgRUTleft = []    avgRUTright = []    startList = []    fileList = []    baseFiles = []    for data in os.listdir(os.getcwd()):        fileList.append(data)        if data.endswith('.TXT') and 'baseline' in data:            with open(data,'rU') as file:                R_iri = [[] for i in xrange(0)]                L_iri = [[] for i in xrange(0)]                R_rut = [[] for i in xrange(0)]                L_rut = [[] for i in xrange(0)]                for row in csv.DictReader(file):                    R_iri.append(float(row[' IRI RWP']))                    L_iri.append(float(row['IRI LWP ']))                    R_rut.append(float(row[' RUT RWP']))                    L_rut.append(float(row[' RUT LWP']))            listRiri.append(R_iri)            listLiri.append(L_iri)            listRrut.append(R_rut)            listLrut.append(L_rut)    transRiri = zip(*listRiri)     transLiri = zip(*listLiri)    transRrut = zip(*listRrut)     transLrut = zip(*listLrut)      for a in range(0,len(transRiri)):        rAvgIRI = np.average(transRiri[a])        avgIRIright.append(round(float(rAvgIRI),4))    for b in range(0,len(transLiri)):        lAvgIRI = np.average(transLiri[b])        avgIRIleft.append(round(float(lAvgIRI),4))    for c in range(0,len(transRrut)):        rAvgRUT = np.average(transRrut[c])        avgRUTright.append(round(float(rAvgRUT),4))    for d in range(0,len(transLrut)):        lAvgRUT = np.average(transLrut[d])        avgRUTleft.append(round(float(lAvgRUT),4))    try:        for files in fileList:            if 'baseline' in files:                baseFiles.append(files)        with open(baseFiles[0],'rU') as file:            for row in csv.DictReader(file):                startList.append(float(row['Start-Mi']))        return startList,avgIRIright,avgIRIleft,avgRUTright,avgRUTleft    except IndexError: sys.exit(0)def baselineWriterIRI():    i = 0    for filename in os.listdir(os.getcwd()):        if filename.endswith('.TXT') and 'baseline' not in filename:            i = i + 1    NUM_COLORS_RIGHT = i    NUM_COLORS_LEFT = i        fig = plt.figure(figsize=(20,12))    ax1 = fig.add_subplot(4,1,1)    cm = plt.get_cmap('gist_rainbow')    ax1.set_color_cycle([cm(1.*i/NUM_COLORS_RIGHT) for i in range(NUM_COLORS_RIGHT)])    ax1.grid(True)    plt.title('Right IRI data per mile for verification runs:')    ax1.tick_params(axis='both', which='major', labelsize=8)    plt.hold(True)    ax2 = fig.add_subplot(4,1,2)    cm = plt.get_cmap('gist_rainbow')    ax2.set_color_cycle([cm(1.*i/NUM_COLORS_LEFT) for i in range(NUM_COLORS_LEFT)])    ax2.grid(True)    plt.title('Left IRI data per mile for verification runs:')    ax2.tick_params(axis='both', which='major', labelsize=8)    plt.hold(True)    ax3 = fig.add_subplot(4,1,3)    cm = plt.get_cmap('gist_rainbow')    ax3.set_color_cycle([cm(1.*i/NUM_COLORS_RIGHT) for i in range(NUM_COLORS_RIGHT)])    ax3.grid(True)    plt.title('Right IRI data per mile for verification runs:')    ax3.tick_params(axis='both', which='major', labelsize=8)    plt.hold(True)    ax4 = fig.add_subplot(4,1,4)    cm = plt.get_cmap('gist_rainbow')    ax4.set_color_cycle([cm(1.*i/NUM_COLORS_LEFT) for i in range(NUM_COLORS_LEFT)])    ax4.grid(True)    plt.title('Left IRI data per mile for verification runs:')    ax4.tick_params(axis='both', which='major', labelsize=8)    plt.hold(True)        # Iterate over the files in the current directory    for filename in os.listdir(os.getcwd()):        # Initialize a new set of lists for each file        startList = []        endList = []        iriRList = []        iriLList = []        fileList = []        # Load the file        if filename.endswith('.TXT') and 'baseline' not in filename:            fileList.append(filename)            with open(filename, 'rU') as file:                for row in csv.DictReader(file):                    try:                        try:                            startList.append(float(row['Start-Mi']))                            endList.append(float(row['  End-Mi']))                        except:                            startList.append(float(row['Start-MP']))                            endList.append(float(row['  End-MP']))                        try:                            iriRList.append(float(row[' IRI R e']))                            iriLList.append(float(row['IRI LWP ']))                        except:                            iriRList.append(float(row[' IRI RWP']))                            iriLList.append(float(row['IRI LWP ']))                    except KeyError: break        else:continue        # Add new data to the plots        ax1.plot(startList,iriRList,label=filename,linewidth=2)                ax2.plot(startList,iriLList,label=filename,linewidth=2)        ax2.legend(loc='lower right',borderaxespad=-4,bbox_to_anchor=(1.062, 0.2),ncol=1)        diff = (np.array([listNew()[1]]) - np.array([iriRList[0:50]]))        ax3.plot(listNew()[0][0:50],diff[0:50][0],label=filename,linewidth=2)        diff = (np.array([listNew()[2]]) - np.array([iriLList[0:50]]))        ax4.plot(listNew()[0][0:50],diff[0:50][0],label=filename,linewidth=2)        print diff[0:50][0]        ax4.legend(loc='lower right',borderaxespad=-4,bbox_to_anchor=(1.062, 0.2),ncol=1)            base1 = ax1.plot(listNew()[0][0:50],listNew()[1])    plt.setp(base1, color='y', linewidth=8.0, alpha=0.7) # adjusting the plot lines properties    ax1.plot(listNew()[0][0:50],(listNew()[1]+np.std(listNew()[1])),linewidth=5.0,color='b',alpha=0.2)    ax1.plot(listNew()[0][0:50],(listNew()[1]-np.std(listNew()[1])),linewidth=5.0,color='b',alpha=0.2)    base2 = ax2.plot(listNew()[0][0:50],listNew()[2])    plt.setp(base2, color='y', linewidth=8.0, alpha=0.7) # adjusting the plot lines properties    ax2.plot(listNew()[0][0:50],(listNew()[2]+np.std(listNew()[2])),linewidth=5.0,color='b',alpha=0.2)    ax2.plot(listNew()[0][0:50],(listNew()[2]-np.std(listNew()[2])),linewidth=5.0,color='b',alpha=0.2)        plt.show()    plt.close('all')def baselineWriterRUT():    i = 0    for filename in os.listdir(os.getcwd()):        if filename.endswith('.TXT') and 'baseline' not in filename:            i = i + 1    NUM_COLORS_RIGHT_RUT = i    NUM_COLORS_LEFT_RUT = i        fig = plt.figure(figsize=(18,10))        ax3 = fig.add_subplot(2,1,1)    cm = plt.get_cmap('gist_rainbow')    ax3.set_color_cycle([cm(1.*i/NUM_COLORS_RIGHT_RUT) for i in range(NUM_COLORS_RIGHT_RUT)])    ax3.grid(True)    plt.title('Right RUT data per mile for verification runs:')    ax3.tick_params(axis='both', which='major', labelsize=8)    pylab.ylim([0,.4])    plt.hold(True)    ax4 = fig.add_subplot(2,1,2)    cm = plt.get_cmap('gist_rainbow')    ax4.set_color_cycle([cm(1.*i/NUM_COLORS_LEFT_RUT) for i in range(NUM_COLORS_LEFT_RUT)])    ax4.grid(True)    plt.title('Left RUT data per mile for verification runs:')    ax4.tick_params(axis='both', which='major', labelsize=8)    pylab.ylim([0,.4])    plt.hold(True)        # Iterate over the files in the current directory    for filename in os.listdir(os.getcwd()):        # Initialize a new set of lists for each file        startList = []        endList = []        rutRList = []        rutLList = []        fileList = []        # Load the file        if filename.endswith('.TXT') and 'baseline' not in filename:            fileList.append(filename)            with open(filename, 'rU') as file:                for row in csv.DictReader(file):                    try:                        startList.append(float(row['Start-Mi']))                    except:                        startList.append(float(row['Start-MP']))                    try:                        endList.append(float(row['  End-Mi']))                    except:                        endList.append(float(row['  End-MP']))                    try:                            rutRList.append(float(row[' RUT R e']))                    except:pass                    try:                        rutRList.append(float(row[' RUT RWP']))                    except:pass                    try:                        rutLList.append(float(row[' RUT L e']))                    except:pass                    try:                        rutLList.append(float(row[' RUT LWP']))                    except:pass        else:continue        try:            ax3.plot(startList,rutRList,label=filename,linewidth=2)                        ax4.legend(loc='lower right',borderaxespad=-4,bbox_to_anchor=(1.062, 0.2),ncol=1)            ax4.plot(startList,rutLList,label=filename,linewidth=2)        except ValueError:pass            base3 = ax3.plot(listNew()[0][0:50],listNew()[3])    plt.setp(base3, color='y', linewidth=9.0, alpha=0.8) # adjusting the plot lines properties    base4 = ax4.plot(listNew()[0][0:50],listNew()[4])    plt.setp(base4, color='y', linewidth=9.0, alpha=0.8) # adjusting the plot lines properties            plt.show()    plt.close('all')baselineWriterIRI()#baselineWriterRUT()